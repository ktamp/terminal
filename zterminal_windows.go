// go.mksyscall -w -lazy=false terminal_windows.go
// MACHINE GENERATED BY go.mksyscall (github.com/kless/cutil); DO NOT EDIT

package terminal

import (
	"syscall"
	"unsafe"
)

var (
	modkernel32 = syscall.MustLoadDLL("kernel32.dll")

	procGetConsoleMode             = modkernel32.MustFindProc("GetConsoleMode")
	procSetConsoleMode             = modkernel32.MustFindProc("SetConsoleMode")
	procGetConsoleScreenBufferInfo = modkernel32.MustFindProc("GetConsoleScreenBufferInfo")
	procReadConsoleInputW          = modkernel32.MustFindProc("ReadConsoleInputW")
)

func getConsoleMode(handle syscall.Handle, mode *State) (err error) {
	r1, _, e1 := syscall.Syscall(procGetConsoleMode.Addr(), 2, uintptr(handle), uintptr(unsafe.Pointer(mode)), 0)
	if int(r1) == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func setConsoleMode(handle syscall.Handle, mode State) (err error) {
	r1, _, e1 := syscall.Syscall(procSetConsoleMode.Addr(), 2, uintptr(handle), uintptr(mode), 0)
	if int(r1) == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func getConsoleScreenBufferInfo(handle syscall.Handle, info *_CONSOLE_SCREEN_BUFFER_INFO) (err error) {
	r1, _, e1 := syscall.Syscall(procGetConsoleScreenBufferInfo.Addr(), 2, uintptr(handle), uintptr(unsafe.Pointer(info)), 0)
	if int(r1) == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}

func readConsoleInput(handleIn syscall.Handle, buf *_INPUT_RECORD, length uint32, numEvents *uint32) (err error) {
	r1, _, e1 := syscall.Syscall6(procReadConsoleInputW.Addr(), 4, uintptr(handleIn), uintptr(unsafe.Pointer(buf)), uintptr(length), uintptr(unsafe.Pointer(numEvents)), 0, 0)
	if int(r1) == 0 {
		if e1 != 0 {
			err = error(e1)
		} else {
			err = syscall.EINVAL
		}
	}
	return
}
